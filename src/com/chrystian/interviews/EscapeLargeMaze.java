package com.chrystian.interviews;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.IntStream;

public class EscapeLargeMaze {

	final static int SIDE = 1000000;
	public static void main(String[] args) {
		EscapeLargeMaze elm = new EscapeLargeMaze();

		Set<String> s1 = new HashSet<>();
		Set<String> s2 = new HashSet<>();
		int[][] aa = generatePoints();
		
		boolean result = elm.isEscapePossible(aa, new int[]{0, 0}, new int[]{200,200});
		
		System.out.println(result);
	}
	
    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {
    	Set<String> sb = new HashSet<>();
    	Set<String> ss = new HashSet<>();
    	Set<String> st = new HashSet<>();
    	
    	IntStream.range(0, blocked.length).boxed().map(i ->  convertToString(blocked[i])).forEach(sb::add);;
    	return isReachedOrBreakThru(sb, target, st, source[0], source[1])
    			&& isReachedOrBreakThru(sb, source, ss, target[0], target[1]);
    }
    
    private boolean isReachedOrBreakThru(Set<String> blocks, int[] target, Set<String> visited, int i, int k) {
    	if(i<0 || i >= SIDE || k < 0 || k >= SIDE) return false;
    	String key = convertToString(i, k);
    	if(visited.contains(key)) return false;
    	if(blocks.contains(key)) return false;
    	int blockedNum = blocks.size();
    	if(visited.size() > Math.pow((blockedNum/2+1), 2 )) return true;
    	if(target[0]==i && target[1] == k) return true;
    	
    	visited.add(key);
    	return isReachedOrBreakThru(blocks, target, visited, i+1, k)
    			||isReachedOrBreakThru(blocks, target, visited, i-1, k)
    			||isReachedOrBreakThru(blocks, target, visited, i, k + 1)
    			||isReachedOrBreakThru(blocks, target, visited, i, k-1);
    }
    
    private String convertToString(int[] point) {
    	StringBuilder sb = new StringBuilder();
    	sb.append((char) point[0]);
    	sb.append((char) point[1]);

    	return sb.toString();
    }
    private String convertToString(int i, int k) {
    	StringBuilder sb = new StringBuilder();
    	sb.append((char) i);
    	sb.append((char) k );

    	return sb.toString();
    }
    
    private static int[][] generatePoints(){

    		
//    	int[][] array = 	{{0,199},{1,198},{2,197},{3,196},{4,195},{5,194},{6,193},{7,192},{8,191},
//    			{9,190},{10,189},{11,188},{12,187},{13,186},{14,185},{15,184},{16,183},{17,182},
//    			{18,181},{19,180},{20,179},{21,178},{22,177},{23,176},{24,175},{25,174},{26,173},
//    			{27,172},{28,171},{29,170},{30,169},{31,168},{32,167},{33,166},{34,165},{35,164},{36,163},
//    			{37,162},{38,161},{39,160},{40,159},{41,158},{42,157},{43,156},{44,155},{45,154},{46,153},
//    			{47,152},{48,151},{49,150},{50,149},{51,148},{52,147},{53,146},{54,145},{55,144},{56,143},
//    			{57,142},{58,141},{59,140},{60,139},{61,138},{62,137},{63,136},{64,135},{65,134},{66,133},
//    			{67,132},{68,131},{69,130},{70,129},{71,128},{72,127},{73,126},{74,125},{75,124},{76,123},
//    			{77,122},{78,121},{79,120},{80,119},{81,118},{82,117},{83,116},{84,115},{85,114},{86,113},
//    			{87,112},{88,111},{89,110},{90,109},{91,108},{92,107},{93,106},{94,105},{95,104},{96,103},
//    			{97,102},{98,101},{99,100},{100,99},{101,98},{102,97},{103,96},{104,95},{105,94},{106,93},
//    			{107,92},{108,91},{109,90},{110,89},{111,88},{112,87},{113,86},{114,85},{115,84},{116,83},
//    			{117,82},{118,81},{119,80},{120,79},{121,78},{122,77},{123,76},{124,75},{125,74},{126,73},
//    			{127,72},{128,71},{129,70},{130,69},{131,68},{132,67},{133,66},{134,65},{135,64},{136,63},
//    			{137,62},{138,61},{139,60},{140,59},{141,58},{142,57},{143,56},{144,55},{145,54},{146,53},
//    			{147,52},{148,51},{149,50},{150,49},{151,48},{152,47},{153,46},{154,45},{155,44},{156,43},
//    			{157,42},{158,41},{159,40},{160,39},{161,38},{162,37},{163,36},{164,35},{165,34},{166,33},
//    			{167,32},{168,31},{169,30},{170,29},{171,28},{172,27},{173,26},{174,25},{175,24},{176,23},
//    			{177,22},{178,21},{179,20},{180,19},{181,18},{182,17},{183,16},{184,15},{185,14},{186,13},
//    			{187,12},{188,11},{189,10},{190,9},{191,8},{192,7},{193,6},{194,5},{195,4},{196,3},{197,2},{198,1},{199,0}};
    	int[][] array = 	{{0,199},{1,198},{2,197},{3,196},{4,195},{5,194},{6,193},{7,192},{8,191},
    			{9,190},{10,189},{11,188},{12,187},{13,186},{14,185},{15,184},{16,183},{17,182},
    			{18,181},{19,180},{20,179},{21,178},{22,177},{23,176},{24,175},{25,174},{26,173},
    			{27,172},{28,171},{29,170},{30,169},{31,168},{32,167},{33,166},{34,165},{35,164},{36,163},
    			{37,162},{38,161},{39,160},{40,159},{41,158},{42,157},{43,156},{44,155},{45,154},{46,153},
    			{47,152},{48,151},{49,150},{50,149},{51,148},{52,147},{53,146},{54,145},{55,144},{56,143},
    			{57,142},{58,141},{59,140},{60,139},{61,138},{62,137},{63,136},{64,135},{65,134},{66,133},
    			{67,132},{68,131},{69,130},{70,129},{71,128},{72,127},{73,126},{74,125},{75,124},{76,123},
    			{77,122},{78,121},{79,120},{80,119},{81,118},{82,117},{83,116},{84,115},{85,114},{86,113},
    			{87,112},{88,111},{89,110},{90,109},{91,108},{92,107},{93,106},{94,105},{95,104},{96,103},
    			{97,102},{98,101},{99,100},{100,99},{101,98},{102,97},{103,96},{104,95},{105,94},{106,93},
    			{107,92},{108,91},{109,90},{110,89},{111,88},{112,87},{113,86},{114,85},{115,84},{116,83},
    			{117,82},{118,81},{119,80},{120,79},{121,78},{122,77},{123,76},{124,75},{125,74},{126,73},
    			{127,72},{128,71},{129,70},{130,69},{131,68},{132,67},{133,66},{134,65},{135,64},{136,63},
    			{137,62},{138,61},{139,60},{140,59},{141,58},{142,57},{143,56},{144,55},{145,54},{146,53},
    			{147,52},{148,51},{149,50},{150,49},{151,48},{152,47},{153,46},{154,45},{155,44},{156,43},
    			{157,42},{158,41},{159,40},{160,39},{161,38},{162,37},{163,36},{164,35},{165,34},{166,33},
    			{167,32},{168,31},{169,30},{170,29},{171,28},{172,27},{173,26},{174,25},{175,24},{176,23},
    			{177,22},{178,21},{179,20},{180,19},{181,18},{182,17},{183,16},{184,15},{185,14},{186,13},
    			{187,12},{188,11},{189,10},{190,9},{191,8},{192,7},{193,6},{194,5},{195,4},{196,3},{197,2},{198,1},{199,0}};
    	return array;
    	
    	
    }
}
