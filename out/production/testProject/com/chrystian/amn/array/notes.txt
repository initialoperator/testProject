Personal sum:
Some properties of this problem are: (I didn't consider this in my program yet, having had the followings checked can make the run time O(n) in some cases)
    -If the array contains all non-positive numbers, then the solution is the number in the array with the smallest magnitude.
    -If the array contains all non-negative numbers, then the problem is trivial and the maximum sum is the sum of all the elements in the list.
    -An empty set[clarification needed] is not valid.
    -There can be multiple different sub-arrays that achieve the same maximum sum to the problem.

*key idea about Kadane's algorithm is: if the max sum subarray lies in position k when the boundary is in i(initial) and n(end), what is the position of max sum subarray when the pointer is in n+1

*The scanner.nextInt() may need to be followed by nextLine() to have the new line accepted.

*when using the loop, remember the initial max number (intial localMax needs to be resolved first).
*The longer findMaxSubarray(xx,xx,xx,xx) method is about the relationship of the current sum&max and current ending position. The current sum and max must match the current ending position.


There is a method kadaneFromInternet() that I copy from the internet, this method is very efficient!
this method can only find the max sum but not the array of the max sum. Because it only needs a number as the max, it can be really effiecient. O(n)!
**problem: this method doesn't accept negative number!!!!  it's not fully considered Kadane's algorithm!



Actually problem
Kadane's Algorithm

Given an array containing both negative and positive integers. Find the contiguous sub-array with maximum sum.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
Print the maximum sum of the contiguous sub-array in a separate line for each test case.

Constraints:
1 ≤ T ≤ 200
1 ≤ N ≤ 1000
-100 ≤ A[i] <= 100

Example:
Input
2
3
1 2 3
4
-1 -2 -3 -4
Output
6
-1



testcases
Case-1:


A[]={2,4,6,8}
maximum contiguous subarry= {2, 4, 6, 8}
maximum contiguous subarray sum= 20
Case-2:


A[]={-2, 3, -7, 5, -9}
maximum contiguous subarry= {5}
maximum contiguous subarray sum= 5
Case-3:


A[]={3, -4, 7, -9, 8, 7}
maximum contiguous subarry= {8, 7}
maximum contiguous subarray sum= 15

A[]={3, -4, 9, -8, 8, 7}
maximum contiguous subarry= {9, -8, 8, 7}
maximum contiguous subarray sum= 16
Case-4:


A[]={3, -4, 9, -8, 8, 7}
maximum contiguous subarry= {9, -8, 8, 7}
maximum contiguous subarray sum= 16
